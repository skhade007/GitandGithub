gb-local repo(non bare repo)
gh-remote repo(central bare)
-when we select readme.md in hub that tym mandatory to copy/crate readme.md file  in local also
git workflow:- working directory>(add)>staging area>(commit)>local repo.
-want to push any file in github, hub repo mandatory.

/D/sahil/LANGUAGES/Git #change directory using linux cmd                                  
configure global and local level we take global
git config --global user.name "snehal khade"
git config --global user.email "khadesnehal7@gmail.com"
git config --list


VS code:-
file select >select terminal
start same as git bash.

now start:- diff of clone and pull-clone download the entire repo,pull only fetch the latest changes.
git clone https://github.com/skhade007/web-page-1.git #copy hub repo in our local machine.

assigmnt1: simple file create and push repo

-crate one test file .html,.phy etc.
a)git status #fatal: not a git repository (or any of the parent directories):
b)git init # .git hidden file generated means rigtht now is git environment.provide environment to folder not file.
c)git status #On branch master/No commits yet/Untracked files:(use "git add <file>..." to include in what will be committed)
                          git_test1.txt
                         nothing added to commit but untracked files present (use "git add" to track
d)git add Git_test1.txt #(.)means add all files in folder.
e)git status #Changes to be committed:(use "git rm --cached <file>..." to unstage)
                            new file:   git_test1.txt
f)git commit -m "my first commit" #[master (root-commit) ca5a97d] my first commit
                                    1 file changed, 1 insertion(+) create mode 100644 git_test1.txt
                         nothing to commit, working tree clean
*****************************git -am "enter message"# this command used to add+commit***********************
G)
 git status:1)untracked- new files that git doesn't yet track
            2)new file/modified- changes done in file(show green in vs)
            3)staged- file is ready to be commited
            4)unmodified- unchanged (done)
commit status:nothing to commit, working tree clean



git remote add origin https://github.com/skhade007/localrepo.git #connection establish local and remote using name of origin.
 git remote -v #to check remote
                    origin  https://github.com/skhade007/localrepo.git (fetch)
                    origin  https://github.com/skhade007/localrepo.git (push)
git remote rename origin mmyname #rename origin to myname 
 git remote -v #to check remote
                    myname  https://github.com/skhade007/localrepo.git (fetch)
                    myname  https://github.com/skhade007/localrepo.git (push)
git branch #to check which branch
  * master
git branch -M main #rename  master branch main because hub branch name is also main thats why we can also try to master but that tym hub name also changed as a master.
 git branch        
  * main
git push origin main #######data sucessfully save in hub repo########
git push -u myname main # nxt tyme we direct used git push comand only
after that we can also create new file in that folder and try to push successfully(ex: create one file in same folder and try to push in hub)
git pull origin main # fetch all data on hub to repo.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*push- on hub repo atleast one commit or fille required.
git log #see commit history
git log -2 #see last 2 commits
git log --online #quickly scanning commit history
git log --grep "hye" #find hye in file
git branch -d feature2 #featrue2 branch deleted
git show #see what is write in file
git Show <tag name or coomit id> #see particular
git remote rm myname #remove origin
git rm file name #permenantly deleted(working and staging area)
git rm --cached filename #removes the file from the staging area (index), but keeps it in the working directory.
git restore --staged 'filename' #removes the file from the staging area (index) but does not modify the working directory.
git reset file name #removes the file from the staging area but may revert the file
git reset --hard
git reset --soft
git revert #used to create a new commit that undoes the changes of a previous commit
git clean -n #dry run check which files are untracked (i.e., not staged or committed) and would be deleted if you run git clean -f.
git clean -f #forcefully delete untracked files in your Git working directory.
git tag #see all the list of tag
git tag -a <tag name> -m <"msg"><commit id>
